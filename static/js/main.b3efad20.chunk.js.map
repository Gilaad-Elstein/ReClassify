{"version":3,"sources":["App.js","index.js"],"names":["net","classifier","knnClassifier","App","props","state","prediction","webcam","React","createRef","this","app","console","log","mobilenet","tf","current","addExample","classId","a","capture","img","activation","infer","dispose","document","getElementById","addEventListener","getNumClasses","predictClass","result","classes","label","confidences","setState","className","ref","autoPlay","playsInline","muted","id","width","height","for","Component","ReactDOM","render"],"mappings":"+RASIA,E,uHACEC,G,MAAaC,OA6FJC,E,YAxFb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,WAAY,QAEd,EAAKC,OAASC,IAAMC,YALJ,E,iFAShBC,KAAKC,Q,6JAILC,QAAQC,IAAI,uB,SAGAC,M,cAAZd,E,OACAY,QAAQC,IAAI,6B,SAISE,IAAQR,OAAOG,KAAKH,OAAOS,S,OAA1CT,E,OAIAU,E,uCAAa,WAAMC,GAAN,iBAAAC,EAAA,sEAECZ,EAAOa,UAFR,OAEXC,EAFW,OAMXC,EAAatB,EAAIuB,MAAMF,EAAK,cAGlCpB,EAAWgB,WAAWK,EAAYJ,GAGlCG,EAAIG,UAZa,2C,sDAgBnBC,SAASC,eAAe,WAAWC,iBAAiB,SAAS,kBAAMV,EAAW,MAC9EQ,SAASC,eAAe,WAAWC,iBAAiB,SAAS,kBAAMV,EAAW,MAC9EQ,SAASC,eAAe,WAAWC,iBAAiB,SAAS,kBAAMV,EAAW,M,aAGxEhB,EAAW2B,gBAAkB,G,kCACbrB,EAAOa,U,eAAnBC,E,OAGAC,EAAatB,EAAIuB,MAAMF,EAAK,c,UAEbpB,EAAW4B,aAAaP,G,QAAvCQ,E,OAEAC,EAAU,CAAC,IAAK,IAAK,KAC3BnB,QAAQC,IAAI,eAAiBkB,EAAQD,EAAOE,OAAS,mBAAqBF,EAAOG,YAAYH,EAAOE,QACpGtB,KAAKwB,SAAS,CAAC5B,WAAYyB,EAAQD,EAAOE,SAE1CX,EAAIG,U,yBAGAT,M,8JAKR,OACA,yBAAKoB,UAAU,OAEb,4BAAQA,UAAU,cAElB,2CAGA,yBAAKA,UAAU,YACf,2BAAOC,IAAK1B,KAAKH,OAAQ8B,UAAQ,EAACC,aAAW,EAACC,OAAK,EAACC,GAAG,SAASC,MAAM,MAAMC,OAAO,QACnF,4BAAQF,GAAG,WAAX,SACA,4BAAQA,GAAG,WAAX,SACA,4BAAQA,GAAG,WAAX,SACA,2BAAOG,IAAI,cAAcjC,KAAKL,MAAMC,kB,GAlFxBsC,aCRlBC,IAASC,OAAQ,kBAAE,EAAF,MAAYrB,SAASC,eAAe,W","file":"static/js/main.b3efad20.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as tf from '@tensorflow/tfjs'\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\n\n\nimport './App.css';\n\n\nlet net;\nconst classifier = knnClassifier.create();\n\nclass App extends Component {\n\n\n  constructor(props){\n    super(props);\n    this.state = {\n      prediction: \"none\"\n    }\n    this.webcam = React.createRef();\n  }\n\n  componentDidMount(){\n    this.app();\n  }\n\n  async app() {\n    console.log('Loading mobilenet..');\n  \n    // Load the model.\n    net = await mobilenet.load();\n    console.log('Successfully loaded model');\n  \n    // Create an object from Tensorflow.js data API which could capture image \n    // from the web camera as Tensor.\n    const webcam = await tf.data.webcam(this.webcam.current);\n  \n    // Reads an image from the webcam and associates it with a specific class\n    // index.\n    const addExample = async classId => {\n      // Capture an image from the web camera.\n      const img = await webcam.capture();\n  \n      // Get the intermediate activation of MobileNet 'conv_preds' and pass that\n      // to the KNN classifier.\n      const activation = net.infer(img, 'conv_preds');\n  \n      // Pass the intermediate activation to the classifier.\n      classifier.addExample(activation, classId);\n  \n      // Dispose the tensor to release the memory.\n      img.dispose();\n    };\n  \n    // When clicking a button, add an example for that class.\n    document.getElementById('class-a').addEventListener('click', () => addExample(0));\n    document.getElementById('class-b').addEventListener('click', () => addExample(1));\n    document.getElementById('class-c').addEventListener('click', () => addExample(2));\n  \n    while (true) {\n      if (classifier.getNumClasses() > 0) {\n        const img = await webcam.capture();\n  \n        // Get the activation from mobilenet from the webcam.\n        const activation = net.infer(img, 'conv_preds');\n        // Get the most likely class and confidence from the classifier module.\n        const result = await classifier.predictClass(activation);\n  \n        const classes = ['A', 'B', 'C'];\n        console.log(\"prediction: \" + classes[result.label] + \"\\n probability: \" + result.confidences[result.label]);\n        this.setState({prediction: classes[result.label]})\n        // Dispose the tensor to release the memory.\n        img.dispose();\n      }\n  \n      await tf.nextFrame();\n    }\n  }\n\n  render() {\n    return(\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n      \n      <h1>ReClassify</h1>\n\n      </header>\n      <div className=\"App-main\">\n      <video ref={this.webcam} autoPlay playsInline muted id=\"webcam\" width=\"224\" height=\"224\"></video>\n      <button id=\"class-a\">Add A</button>\n      <button id=\"class-b\">Add B</button>\n      <button id=\"class-c\">Add C</button>\n      <label for=\"prediction\">{this.state.prediction}</label>\n      </div>\n    </div>\n\n    \n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}