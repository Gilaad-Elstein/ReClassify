{"version":3,"sources":["App.js","index.js"],"names":["net","classifier","knnClassifier","App","props","toggleRunning","setState","Running","state","Prediction","app","requestReset","Reset","Confidence","webcam","React","createRef","this","console","log","mobilenet","tf","current","addExample","classId","a","capture","img","activation","infer","dispose","document","getElementById","addEventListener","clearAllClasses","getNumClasses","predictClass","result","classes","label","confidences","toFixed","className","ref","autoPlay","playsInline","muted","id","width","height","htmlFor","getConfidence","onClick","Component","ReactDOM","render"],"mappings":"+RASIA,E,uHACEC,G,MAAaC,OAiIJC,E,YA5Hb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAwERC,cAAgB,WACd,EAAKC,SAAS,CAACC,SAAU,EAAKC,MAAMD,UAChC,EAAKC,MAAMD,UACb,EAAKD,SAAS,CAACG,WAAY,SAC3B,EAAKC,QA7ES,EA2FlBC,aAAe,WACb,EAAKL,SAAS,CAACM,OAAO,KA1FtB,EAAKJ,MAAQ,CACXC,WAAY,OACZI,WAAa,EACbN,SAAS,EACTK,OAAO,GAET,EAAKE,OAASC,IAAMC,YARJ,E,iFAYhBC,KAAKP,Q,6JAILQ,QAAQC,IAAI,uB,SAGAC,M,cAAZpB,E,OACAkB,QAAQC,IAAI,6B,SAISE,IAAQP,OAAOG,KAAKH,OAAOQ,S,OAA1CR,E,OAIAS,E,uCAAa,WAAMC,GAAN,iBAAAC,EAAA,sEAECX,EAAOY,UAFR,OAEXC,EAFW,OAMXC,EAAa5B,EAAI6B,MAAMF,EAAK,cAGlC1B,EAAWsB,WAAWK,EAAYJ,GAGlCG,EAAIG,UAZa,2C,sDAgBnBC,SAASC,eAAe,WAAWC,iBAAiB,SAAS,kBAAMV,EAAW,MAC9EQ,SAASC,eAAe,WAAWC,iBAAiB,SAAS,kBAAMV,EAAW,MAC9EQ,SAASC,eAAe,WAAWC,iBAAiB,SAAS,kBAAMV,EAAW,M,YAEvEN,KAAKT,MAAMD,Q,oBACZU,KAAKT,MAAMI,QACbX,EAAWiC,kBACXjB,KAAKX,SAAS,CAACO,WAAY,EAAGJ,WAAY,OAAQG,OAAO,OAEvDX,EAAWkC,gBAAkB,G,kCACbrB,EAAOY,U,eAAnBC,E,OAGAC,EAAa5B,EAAI6B,MAAMF,EAAK,c,UAEb1B,EAAWmC,aAAaR,G,QAAvCS,E,OAEAC,EAAU,CAAC,IAAK,IAAK,KAC3BpB,QAAQC,IAAI,eAAiBmB,EAAQD,EAAOE,OAAS,mBAAqBF,EAAOG,YAAYH,EAAOE,QACpGtB,KAAKX,SAAS,CAACG,WAAY6B,EAAQD,EAAOE,OAAQ1B,WAAYwB,EAAOG,YAAYH,EAAOE,SAExFZ,EAAIG,U,yBAGAT,M,gCAERJ,KAAKX,SAAS,CAACG,WAAY,mBAAoBI,WAAY,I,6IAY3D,MAAO,gBAAmBI,KAAKT,MAAMD,SACJ,IAAxBU,KAAKT,MAAMK,YAAkB4B,QAAQ,GAAK,IAAM,W,sCAIzD,OAAOxB,KAAKT,MAAMD,QAClB,eAAkBU,KAAKT,MAAMC,WAAc,oB,+BAQ3C,OACA,yBAAKiC,UAAU,OAEb,4BAAQA,UAAU,cAElB,0CACA,wBAAIA,UAAU,MAAd,oCAGA,yBAAKA,UAAU,YACf,2BAAOC,IAAK1B,KAAKH,OAAQ8B,UAAQ,EAACC,aAAW,EAACC,OAAK,EAACC,GAAG,SAASC,MAAM,MAAMC,OAAO,QACnF,2BAAOP,UAAU,QAAQQ,QAAQ,cAAcjC,KAAKT,MAAMC,WAAW,6BAAUQ,KAAKkC,iBACpF,yBAAKT,UAAU,WACf,4BAAQK,GAAG,WAAX,WADA,WAEA,4BAAQA,GAAG,WAAX,WAFA,WAGA,4BAAQA,GAAG,WAAX,YACA,6BACF,4BAAQA,GAAG,gBAAgBK,QAASnC,KAAKZ,eAAzC,cARE,WASF,4BAAQ0C,GAAG,QAAQK,QAASnC,KAAKN,cAAjC,qB,GArHc0C,aCRlBC,IAASC,OAAQ,kBAAE,EAAF,MAAYxB,SAASC,eAAe,W","file":"static/js/main.c7c4f2a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as tf from '@tensorflow/tfjs'\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\n\n\nimport './App.css';\n\n\nlet net;\nconst classifier = knnClassifier.create();\n\nclass App extends Component {\n\n\n  constructor(props){\n    super(props);\n    this.state = {\n      Prediction: \"none\",\n      Confidence:  0,\n      Running: true,\n      Reset: false\n    }\n    this.webcam = React.createRef();\n  }\n\n  componentDidMount(){\n    this.app();\n  }\n\n  async app() {\n    console.log('Loading mobilenet..');\n  \n    // Load the model.\n    net = await mobilenet.load();\n    console.log('Successfully loaded model');\n  \n    // Create an object from Tensorflow.js data API which could capture image \n    // from the web camera as Tensor.\n    const webcam = await tf.data.webcam(this.webcam.current);\n  \n    // Reads an image from the webcam and associates it with a specific class\n    // index.\n    const addExample = async classId => {\n      // Capture an image from the web camera.\n      const img = await webcam.capture();\n  \n      // Get the intermediate activation of MobileNet 'conv_preds' and pass that\n      // to the KNN classifier.\n      const activation = net.infer(img, 'conv_preds');\n  \n      // Pass the intermediate activation to the classifier.\n      classifier.addExample(activation, classId);\n  \n      // Dispose the tensor to release the memory.\n      img.dispose();\n    };\n  \n    // When clicking a button, add an example for that class.\n    document.getElementById('class-a').addEventListener('click', () => addExample(0));\n    document.getElementById('class-b').addEventListener('click', () => addExample(1));\n    document.getElementById('class-c').addEventListener('click', () => addExample(2));\n  \n    while (this.state.Running) {\n      if (this.state.Reset){\n        classifier.clearAllClasses();\n        this.setState({Confidence: 0, Prediction: \"none\", Reset: false});\n      }\n      if (classifier.getNumClasses() > 0) {\n        const img = await webcam.capture();\n  \n        // Get the activation from mobilenet from the webcam.\n        const activation = net.infer(img, 'conv_preds');\n        // Get the most likely class and confidence from the classifier module.\n        const result = await classifier.predictClass(activation);\n  \n        const classes = ['A', 'B', 'C'];\n        console.log(\"prediction: \" + classes[result.label] + \"\\n probability: \" + result.confidences[result.label]);\n        this.setState({Prediction: classes[result.label], Confidence: result.confidences[result.label]})\n        // Dispose the tensor to release the memory.\n        img.dispose();\n      }\n  \n      await tf.nextFrame();\n    }\n    this.setState({Prediction: \"Model suspended.\", Confidence: 0});\n  }\n\n  toggleRunning = () => {\n    this.setState({Running: !this.state.Running});\n    if(!this.state.Running){\n      this.setState({Prediction: \"none\"});\n      this.app();\n    }\n  }\n\n  getConfidence(){\n    return \"Confidence: \" +  (this.state.Running ? \n            (this.state.Confidence * 100).toFixed(0) + \"%\" : \" --- \");\n  }\n\n  getPrediction(){\n    return this.state.Running ? \n    \"Prediction: \" + (this.state.Prediction) : \"Model suspended\";\n  }\n\n  requestReset = () => {\n    this.setState({Reset: true});\n  }\n\n  render() {\n    return(\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n      \n      <h1>ReClassify</h1>\n      <h4 className=\"h4\">On the fly image classification</h4>\n\n      </header>\n      <div className=\"App-main\">\n      <video ref={this.webcam} autoPlay playsInline muted id=\"webcam\" width=\"224\" height=\"224\"></video>\n      <label className=\"label\" htmlFor=\"prediction\">{this.state.Prediction}<br></br>{this.getConfidence()}</label>\n      <div className=\"buttons\">\n      <button id=\"class-a\" >Class A</button>&nbsp;&nbsp;\n      <button id=\"class-b\">Class B</button>&nbsp;&nbsp;\n      <button id=\"class-c\">Class C</button></div>\n      <br></br>\n    <button id=\"toggleRunning\" onClick={this.toggleRunning}>Start/Stop</button>&nbsp;&nbsp;\n    <button id=\"reset\" onClick={this.requestReset}>Reset model</button>\n\n      </div>\n    </div>\n\n    \n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}